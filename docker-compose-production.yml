name: poupe-ai-production

x-django-common-env: &django-common-env
  POSTGRES_DB: ${FINANCE_DB}
  POSTGRES_USER: ${FINANCE_DB_USER}
  POSTGRES_PASSWORD: ${FINANCE_DB_PASSWORD}
  POSTGRES_HOST: finances-db
  POSTGRES_PORT: 5432
  DATABASE_URL: postgres://${FINANCE_DB_USER}:${FINANCE_DB_PASSWORD}@finances-db:5432/${FINANCE_DB}
  KEYCLOAK_ISSUER: ${KEYCLOAK_ISSUER}
  KEYCLOAK_JWKS_URL: ${KEYCLOAK_JWKS_URL}
  REDIS_URL: ${REDIS_FINANCE_URL}
  KEYCLOAK_SERVER_URL: ${KEYCLOAK_SERVER_URL}
  KEYCLOAK_REALM_NAME: "poupe-ai"
  KEYCLOAK_ADMIN_CLIENT_ID: "poupe-ai-backend"
  KEYCLOAK_ADMIN_CLIENT_SECRET: ${KEYCLOAK_ADMIN_CLIENT_SECRET}
  RABBITMQ_URL: ${RABBITMQ_URL}
  RABBITMQ_EXCHANGE_MAIN: ${RABBITMQ_EXCHANGE_MAIN}
  RABBITMQ_ROUTING_KEY: ${RABBITMQ_ROUTING_KEY}
  DJANGO_SETTINGS_MODULE: config.settings.local
  DEBUG: 'true'
  USE_DOCKER: 'yes'

services:
  # --- BANCOS DE DADOS E CACHE ---
  keycloak-db:
    image: postgres:17.5-alpine
    container_name: keycloak-db-prod
    environment:
      POSTGRES_DB: ${KEYCLOAK_DB}
      POSTGRES_USER: ${KEYCLOAK_DB_USER}
      POSTGRES_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
    volumes:
      - keycloak_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${KEYCLOAK_DB_USER}", "-d", "${KEYCLOAK_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - poupe-ai-network

  finances-db:
    image: postgres:17.5-alpine
    container_name: finances-db-prod
    environment:
      POSTGRES_DB: ${FINANCE_DB}
      POSTGRES_USER: ${FINANCE_DB_USER}
      POSTGRES_PASSWORD: ${FINANCE_DB_PASSWORD}
    volumes:
      - finances_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${FINANCE_DB_USER}", "-d", "${FINANCE_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - poupe-ai-network

  redis:
    image: redis:7-alpine
    container_name: redis-prod
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - poupe-ai-network

  # --- INFRAESTRUTURA CORE ---
  keycloak:
    image: quay.io/keycloak/keycloak:26.3.2
    container_name: keycloak-prod
    command:
      - start-dev
      - --import-realm
      - --spi-theme-cache-themes=false
      - --spi-theme-cache-templates=false
    environment:
      KC_DB: postgres
      KC_DB_URL_HOST: keycloak-db
      KC_DB_URL_DATABASE: ${KEYCLOAK_DB}
      KC_DB_USERNAME: ${KEYCLOAK_DB_USER}
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      KC_HTTP_ENABLED: 'true'
      KC_PROXY: 'none'
      KC_HOSTNAME_STRICT: 'false'
      KC_HOSTNAME_STRICT_HTTPS: 'false'
      KC_HOSTNAME: ${IP_ADDRESS}
      KC_BOOTSTRAP_ADMIN_USERNAME: ${KEYCLOAK_ADMIN_USER}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      POUPE_AI_BACKEND_CLIENT_SECRET: ${POUPE_AI_BACKEND_CLIENT_SECRET}
    ports:
      - "8080:8080"
    volumes:
      - ./keycloak/realms/import:/opt/keycloak/data/import
      - ./keycloak/themes/poupe-ai:/opt/keycloak/themes/poupe-ai
    depends_on:
      keycloak-db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - poupe-ai-network

  kong:
    build:
      context: ./kong
      dockerfile: Dockerfile
    container_name: kong-gateway-prod
    environment:
      KONG_DATABASE: 'off'
      KONG_DECLARATIVE_CONFIG: /opt/kong/kong.yaml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 'off'
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_NGINX_DAEMON: 'off'
      KONG_PLUGINS: bundled,jwt-header-injector
      KONG_LUA_PACKAGE_PATH: /usr/local/share/lua/5.1/kong/plugins/?.lua;;
      KEYCLOAK_ISSUER: ${KEYCLOAK_ISSUER}
    ports:
      - "8000:8000"
    volumes:
      - ./kong/kong.template.yaml:/opt/kong/kong.template.yaml
      - ./kong/plugins/jwt-header-injector:/usr/local/share/lua/5.1/kong/plugins/jwt-header-injector
    depends_on:
      - keycloak
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - poupe-ai-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq-prod
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - poupe-ai-network

  # --- SERVIÇOS DA APLICAÇÃO ---
  finances-service:
    build:
      context: ./services/poupeai-finance-service
      dockerfile: ./compose/local/django/Dockerfile
    container_name: finances-service-prod
    command: /start
    volumes:
      - ./services/poupeai-finance-service:/app:z
    environment:
      <<: *django-common-env
    depends_on:
      finances-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - poupe-ai-network

  finances-celery-worker:
    build:
      context: ./services/poupeai-finance-service
      dockerfile: ./compose/local/django/Dockerfile
    container_name: finances-celery-worker-prod
    command: /start-celeryworker
    volumes:
      - ./services/poupeai-finance-service:/app:z
    environment:
      <<: *django-common-env
    depends_on:
      - redis
      - finances-db
      - rabbitmq
    restart: unless-stopped
    networks:
      - poupe-ai-network

  finances-celery-beat:
    build:
      context: ./services/poupeai-finance-service
      dockerfile: ./compose/local/django/Dockerfile
    container_name: finances-celery-beat-prod
    command: /start-celerybeat
    volumes:
      - ./services/poupeai-finance-service:/app:z
    environment:
      <<: *django-common-env
    depends_on:
      - redis
      - finances-db
      - rabbitmq
    restart: unless-stopped
    networks:
      - poupe-ai-network
  
  finances-celery-flower:
    build:
      context: ./services/poupeai-finance-service
      dockerfile: ./compose/local/django/Dockerfile
    container_name: finances-celery-flower-prod
    command: /start-flower
    volumes:
      - ./services/poupeai-finance-service:/app:z
    environment:
      <<: *django-common-env
      CELERY_FLOWER_USER: ${CELERY_FLOWER_USER}
      CELERY_FLOWER_PASSWORD: ${CELERY_FLOWER_PASSWORD}
    ports:
      - '5555:5555'
    depends_on:
      - redis
      - finances-db
    restart: unless-stopped
    networks:
      - poupe-ai-network

  notification-service:
    build:
      context: ./services/poupeai-notification-service
      dockerfile: Dockerfile
    container_name: notification-service-prod
    volumes:
      - ./services/poupeai-notification-service/src:/app
    environment:
      DEBUG: 'True'
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_MAX_RETRIES: 3
      RABBITMQ_EXCHANGE_MAIN: notification_exchange
      RABBITMQ_QUEUE_MAIN: notification_events
      RABBITMQ_ROUTING_KEY: notification.event
      RABBITMQ_EXCHANGE_RETRY: notification_exchange.retry
      RABBITMQ_QUEUE_RETRY: notification_events.retry
      RABBITMQ_EXCHANGE_DLQ: notification_exchange.dlq
      RABBITMQ_QUEUE_DLQ: notification_events.dlq
      RABBITMQ_RETRY_DELAY_MS: 10000
      REDIS_URL: ${REDIS_NOTIFICATION_URL}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      MAIL_FROM: ${MAIL_FROM}
      MAIL_FROM_NAME: ${MAIL_FROM_NAME}
      MAIL_PORT: ${MAIL_PORT}
      MAIL_SERVER: ${MAIL_SERVER}
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - poupe-ai-network

  reports-service:
    build:
      context: ./services/poupeai-report-service
      dockerfile: Dockerfile
    container_name: reports-service-prod
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      GeminiAI__ApiKey: ${GEMINI_API_KEY}
      DeepseekAI__ApiKey: ${DEEPSEEK_API_KEY}
      Database__ConnectionString: ${REPORT_DB_CONNECTION_STRING}
      Database__DatabaseName: ${REPORT_DB_NAME}
      Keycloak__Authority: ${KEYCLOAK_AUTHORITY}
      Keycloak__Audience: ${KEYCLOAK_AUDIENCE}
      Keycloak__ValidIssuer: ${KEYCLOAK_ISSUER}
      FinancesService__BaseUrl: ${FINANCES_SERVICE_BASE_URL}
      FinancesService__TransactionsEndpoint: ${FINANCES_SERVICE_TRANSACTIONS_ENDPOINT}
      FinancesService__CategoryEndpoint: ${FINANCES_SERVICE_CATEGORY_ENDPOINT}
    restart: unless-stopped
    networks:
      - poupe-ai-network

  # --- LOGGING E MONITORAMENTO ---
  loki:
    image: grafana/loki:3.5.2
    container_name: loki-prod
    command: 
      - -config.file=/etc/loki/config.yaml
      - -config.expand-env=true
    volumes:
      - ./logging/loki/loki-config.yaml:/etc/loki/config.yaml:ro
      - loki_data:/loki
    restart: unless-stopped
    networks:
      - poupe-ai-logging-network

  promtail:
    image: grafana/promtail:3.5.2
    container_name: promtail-prod
    command: 
      - -config.file=/etc/promtail/config.yml
      - -config.expand-env=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./logging/promtail/promtail-config.yaml:/etc/promtail/config.yml:ro
      - promtail_positions:/var/lib/promtail
      - promtail_wal:/var/lib/promtail/wal
    depends_on:
      - loki
    restart: unless-stopped
    networks:
      - poupe-ai-network
      - poupe-ai-logging-network

  grafana:
    image: grafana/grafana:12.0.2
    container_name: grafana-prod
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GF_SECURITY_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
    volumes:
      - ./logging/grafana/provisioning:/etc/grafana/provisioning:ro
      - grafana_data:/var/lib/grafana
    depends_on:
      - loki
    restart: unless-stopped
    networks:
      - poupe-ai-logging-network

volumes:
  keycloak_data:
  finances_data:
  redis_data:
  rabbitmq_data:
  loki_data:
  promtail_positions:
  promtail_wal:
  grafana_data:

networks:
  poupe-ai-network:
    name: poupe-ai-network
    driver: bridge
  poupe-ai-logging-network:
    name: poupe-ai-logging-network
    driver: bridge